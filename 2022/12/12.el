(defun aoc-maze-find-coords (maze needle)
  (->> maze
       (--map-indexed `(,(-elem-index needle it) ,it-index))
       (--filter (and (car it) (cadr it)) )
       (car)))

(let* ((maze (->> (f-read "data")
                  (aoc-s-split "\n")
                  (--map (aoc-s-split "" it))))

       (start (aoc-maze-find-coords maze "S"))
       (end (aoc-maze-find-coords maze "E")))

  (defun aoc-maze-get-value (coordinate maze)
    (let* ((x (car coordinate))
           (y (cadr coordinate))
           (letter-at-coordinate (when (and x y) (nth x (nth y maze)))))
      (when (and letter-at-coordinate
                 (>= x 0)
                 (>= y 0))
        (cond
         ((s-equals-p "S" letter-at-coordinate) (string-to-char "a"))
         ((s-equals-p "E" letter-at-coordinate) (+ 1 (string-to-char "z")))
         (letter-at-coordinate (string-to-char letter-at-coordinate))))))

  (defun aoc-maze-walk (state)
    (loop-while (ht-get state "queue")
      (let* ((shortest (ht-get state "shortest"))
             (maze (ht-get state "maze"))
             (width (length (car maze)))
             (height (length maze))
             (queue (ht-get state "queue"))
             (end (ht-get state "end"))
             (visited (ht-get state "visited"))
             (current-position (caar queue))
             (score (cadar queue))
             (current-value (aoc-maze-get-value current-position maze))
             (candidates (->> '((-1 0) (1 0) (0 1) (0 -1))
                              (--map (-list (+ (car current-position) (car it)) (+ (cadr current-position) (cadr it))))
                              (--filter (and (>= (car it) 0)
                                             (>= (cadr it) 0)
                                             (< (car it) width)
                                             (< (cadr it) height)))
                              (--filter (<= (aoc-maze-get-value it maze) (+ 1 current-value))))))
        (ht-set state "queue" (cdr queue))

        (if (and (-same-items-p current-position end)
                 (< score shortest))
            (progn
              (ht-set state "shortest" score)
              (loop-continue))

          (if (-contains-p visited current-position)
              (loop-continue)

            (ht-set state "visited" (append visited `(,current-position)))

            (ht-set state "queue" (append queue (--map `(,it ,(+ score 1)) candidates)))
            (loop-continue)))))
    state)

  ;; (aoc-maze-walk (ht ("maze" maze)
  ;;                    ("start" start)
  ;;                    ("end" end)
  ;;                    ("queue" `((,start 0)))
  ;;                    ("visited" '())
  ;;                    ("shortest" 123456789)))

  (->> maze
       (-map-indexed (lambda (index row)
                       (if (s-starts-with-p "abc" (s-join "" row))
                           `(0 ,index))))
       (--filter (car it))
       (--map (aoc-maze-walk (ht ("maze" maze)
                                 ("start" it)
                                 ("end" end)
                                 ("queue" `((,it 0)))
                                 ("visited" '())
                                 ("shortest" 123456789))))
       (--map (gethash "shortest" it))
       (-min)
       (number-to-string)
       (kill-new)
       )
  )
